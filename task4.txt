Part 1
-------------

a) Create a new repo called "test-repo" on github.com 

b) Clone this to your local machine (using git clone ...)

c) Add a file hello.txt with the single line "Hello,world!" in it to
   the cloned repo on the local machine. Do "git add ..." and 
   "git commit ...".

d) Push the local repo to the remote "test-repo" on github.com 

[Note: from now onwards, make sure you use vi/vim as your standard
text editor. Please don't use stuff like gedit (or even something like
sublime) - vi/vim usage is a *basic* skill for developers working on Unix-like
systems]
-----------------------------------------
Part 2
-----------

a) Install and learn to use "tmux": 

https://danielmiessler.com/study/tmux/

https://www.youtube.com/watch?v=BHhA_ZKjyxo


Part 3
-------------

View (and try out on your machine - please note: just viewing videos is 
NOT enough ... actively work  out everything on your system) 
the following videos (from the .iso image):

rl100/compilat

rl100/gdb 

(after you finish these videos, you should be capable of compiling,running and 
debugging simple  C programs on Linux. Even though we don't focus on C 
in this  course, it is good to have and understanding of stuff like this 
from a broader  perspective)

(note: if you haven't done any C programming, please check out some online 
resource and learn the very basics - just learn enough to let  you print 
messages on the screen using   "printf",read numbers using "scanf", 
do basic arithmetic/if statements/while/for loops. This should not take you 
more than 1 or 2  hours. Knowing  basic C is part of computer 
literacy - so please take it seriously).


Part 4
--------------

Download and untar:

http://pramode.net/downloads/bitops.tgz

You will get two  PDF's. Read the documents and make sure you understand 
everything PERFECTLY. Try out ALL the C programs - write extra C code of your own.

Bit manipulation and number representation is something which many students 
don't learn properly ... and it is VERY important in a lot of domains - 
not just low level embedded systems programming.

Please discuss on the list actively ... 

